{"name":"Bash-lib","tagline":"Library of bash scripts","body":"bash-lib\r\n========\r\nLibrary of bash scripts.\r\n\r\nAuthor: Alan K. Stebbens <aks@stebbens.org>\r\n\r\nUsage:\r\n------\r\n\r\n    export PATH=$PATH:$HOME/lib\r\n    source bash-lib.sh\r\n\r\nReplace `$HOME/lib` with wherever these files are installed\r\n\r\nThis bash library is modular, and the individual utilities can be independently\r\nsourced, as needed.\r\n\r\nEach library has a corresponding test script to ensure proper operation before \r\ninstallation.  These test scripts are also the basis for regression tests, after\r\nnew features are added (or bugs are fixed).\r\n\r\nFor example, the `text-utils.sh` library has a test script called\r\n`test-text-utils.sh`.  The `test-utils.sh` library is used to operate all the\r\ntests and makes a very good example of how to implement TDD in bash scripts.\r\n\r\nInstallation:\r\n-------------\r\n\r\nThe installation is managed with `make`, using `Makefile` which, in turn,\r\nsources `Makefile.inc`.  If any changes are needed to support your\r\ninstallation, the changes should be made within the `Makefile`.\r\n\r\n    make\r\n\r\nShow the various make targets.\r\n\r\n    make tests\r\n\r\nRun all the tests to confirm proper operation.  Some of the tests can take a\r\nfew minutes.  Progress will be shown, so there is no guessing.\r\n\r\n    make install\r\n\r\nInstall the bash library into `$HOME/lib` (the default).\r\n\r\n    make install libdirs=/usr/local/lib\r\n\r\nInstall into `/usr/local/lib`.\r\n\r\n    make clean\r\n\r\nThis will remove any temporary output files (from testing).  It will also\r\nremove `prompt-colors.sh` because it is a _generated_ file.\r\n\r\nIf this bash library is installed into an alternative path, e.g., `/opt/lib`,\r\nthen any scripts that wish to make use of them will need to modify the `PATH`\r\nenvironment variable, in order to source the library files without explicit\r\npaths.\r\n\r\nThis library is available at [https://github.com/aks/bash-lib.git].\r\n\r\nThere is a script called `maybe-install-bash-lib` that can be incorporated into\r\nthe installation process of other bash libraries that depend on `bash-lib`.  It\r\nwill check to see if the named utilities are installed, and if not, perform an\r\ninstallation from the repository.\r\n\r\nIf you wish to make improvements, feel free to fork this repo, make and test\r\nyour changes, and the issue a pull request.\r\n\r\nAs part of your testing, you'll probably need to source `reset-util-vars.sh`,\r\nwhich defines `reset_util_vars`, which you can then invoke to reset the shell\r\nvariables that prevent redundant sourcings.  Alternatively, you can increment\r\nthe version number in the utility libraries that you are modifying.\r\n\r\nMany of these utility functions have helpful argument checking.  In order to\r\navoid unnecessary overhead, each function name that provides argument checking\r\nalso has a more efficient, non-argument checking name, prefixed with `__`.\r\n\r\nFollow the links below for detailed descriptions of each module.\r\n\r\n* [arg-utils.sh](#arg_utils)\r\n* [calendar-utils.sh](#calendar_utils)\r\n* [date-utils.sh](#date_utils)\r\n* [hash-utils.sh](#hash_utils)\r\n* [help-util.sh](#help_util)\r\n* [list-utils.sh](#list_utils)\r\n* [prompt-colors.sh](#prompt_colors)\r\n* [real-utils.sh](#real_utils)\r\n* [run-utils.sh](#run_utils)\r\n* [sh-utils.sh](#sh_utils)\r\n* [talk-utils.sh](#talk_utils)\r\n* [text-utils.sh](#text_utils)\r\n* [test-utils.sh](#test_utils)\r\n* [time-utils.sh](#time_utils)\r\n\r\n\r\narg-utils.sh <a name=\"arg_utils\" id=\"arg_utils\">\r\n============\r\n\r\nThe `arg-utils.sh` library is a collection of bash functions that enable\r\nflexible argument handling on functions that need to be able to accept\r\narguments on the command-line or on `STDIN`.\r\n\r\nWhen writing a bash function that can accept input on the command line or from\r\n`STDIN`, the function should begin with an invocation of one of the following\r\nfunctions.\r\n\r\nFor example, if we had a function that needed a numeric argument, the following\r\ninvocation would be used:\r\n\r\n    local f=`numarg_or_input \"$1\"`\r\n\r\nIf a text argument is needed:\r\n\r\n    local txtarg=`arg_or_input \"$1\"`\r\n\r\nFor those cases where two or more arguments can be accepted, either on the\r\ncommand-line or from `STDIN`:\r\n\r\n    local args=( `args_or_input \"$@\"` )\r\n\r\nThe following are the `arg-util` functions:\r\n\r\n    numarg_or_input \"$1\"\r\n\r\nReturn a numeric argument or read it from `STDIN`\r\n\r\n    arg_or_input \"$1\"\r\n\r\nReturn the argument or read it from `STDIN`\r\n\r\n    args_or_input \"$@\"\r\n\r\nReturn arguments or read them from `STDIN`\r\n\r\n    args_or_stdin \"$@\"\r\n    \r\nReturn the arguments or read all of `STDIN`\r\n\r\n    append_args \"$@\"\r\n    \r\nAppend the arguments to the next line from `STDIN`\r\n\r\n    append_arg \"$1\"\r\n\r\nAppend the argument to the next line from `STDIN`\r\n\r\nExample\r\n-------\r\n\r\nLet's say we have two bash functions to convert Celsius to Fahrenheit and\r\nvice-versa.  Let's call them `c2f` and `f2c`.  With these functions, they can\r\nbe used in two ways:\r\n\r\nTypical functions with arguments:\r\n\r\n    c2f 69              # convert 69C to F\r\n    f2c 10              # convert 10F to C\r\n\r\nOr, accepting their input on `STDIN`, as in a pipe:\r\n\r\n     echo 69 | c2f      # convert 69C to F\r\n     echo 10 | f2c      # convert 10F to C\r\n\r\nThe advantage of the latter approach is that the functions can be fitted into\r\na pipe where the data can come from another process directly on its `STDOUT`.\r\n\r\nThe definition of these two functions would be:\r\n\r\n    # f2c -- convert F to C via: (째F  -  32)  x  5/9 = 째C\r\n    function f2c() {\r\n      local f=`numarg_or_input \"$1\"`\r\n      echo \"scale=1; ($f - 32)*5/9' | bc\r\n    }\r\n    # c2f -- convert C to F via 째C  x  9/5 + 32 = 째F\r\n    function c2f() {\r\n      local c=`numarg_or_input \"$1\"`\r\n      echo \"scale=1; $c * 9/5 + 32\" | bc\r\n    }\r\n\r\ncalendar-utils.sh <a name=\"calendar_utils\" id=\"calendar_utils\">\r\n=================\r\ncalendar-utils provide some basic calendaring functions.\r\n\r\nUsage:\r\n\r\n    source calendar-utils.sh\r\n\r\nFunctions:\r\n\r\n    date_to_jdn YYYY MM DD         -- return Julian Day Number for given DATE\r\n\r\n    day_of_week YEAR MM DD [STYLE] -- return the day of the week for the given date\r\n\r\n    days_in_month YEAR MM          -- return # of days in the month MM for YEAR\r\n\r\n    days_in_month[MM]              -- array indexed by month (1..12) to return # days\r\n\r\n    easter YEAR                    -- return date of Easter for YEAR\r\n\r\n    gregorian_easter YEAR          -- return date of Easter for YEAR in Gregorian calendar\r\n\r\n    is_leap_year YEAR              -- return whether or not YEAR is a leap year\r\n\r\n    jdn_to_date JDN                -- return date for given Julian Day Number (JDN)\r\n\r\n    julian_period YEAR             -- return Julian year for given Gregorian YEAR\r\n\r\n    style_for_year YEAR            -- compute the calendar style for the given YEAR\r\n\r\n    week_number YYYY MM DD         -- return the week number for the given date\r\n\r\n    Astronomical (obscure) Functions:\r\n\r\n    epact YEAR                     -- return the epact for the given YEAR\r\n\r\n    golden_number YEAR             -- return the golden number for YEAR\r\n\r\n    indiction YEAR                 -- return indication for YEAR\r\n\r\n    paschal_full_moon YEAR         -- return the Paschal full moon date for YEAR\r\n\r\n    solar_number YEAR              -- return the solar number for YEAR\r\n\r\n\r\n\r\ndate-utils.sh <a name=\"date_utils\" id=\"date_utils\">\r\n=============\r\n\r\nThe `date-utils` library enables easy management of dates and its year, month,\r\nand day components.  A variety of date formats are supported both on input\r\nparsing, and on output formatting.  \r\n\r\nThe envar `EUROPEAN_DATES` controls how the format `NN/NN/NNNN` is interpreted:\r\nif set to 1, that format is taken to mean `DD/MM/YYYY`, where DD is the day of\r\nthe month; otherwise, it is parsed as `MM/DD/YYYY`.\r\n\r\n    date_parse [DATESTRING]\r\n    date_arg   [DATESTRING]\r\n\r\nParse `DATESTRING` in one of several recognized formats: `YYYY-MM-DD`,\r\n`YYYY.MM.DD`, `YYYY/MM/DD`, `YYYY MM DD`, `MM DD YYYYY`, `DD.MM.YYYY`, and `DD\r\nMM YYYYY` (if `EUROPEAN_DATES` is set).  If the `DATESTRING` is successfully\r\nparsed, the variables `year`, `month`, and `day` are set to their respective\r\nnumbers.  `date_arg` is another name for the same function.\r\n\r\nIf `DATESTRING` is empty, a line of input from `STDIN` is read and used\r\ninstead.  This makes the script handy in a pipe.  Example:\r\n\r\n    extract_first_date_from_log /var/log/messages | date_parse\r\n\r\nwill set `year`, `month`, and `day` from the date extracted.\r\n\r\n\r\n    month_number MONTHNAME\r\n    month_num    MONTHNAME\r\n\r\nGiven a month name, output it's index.\r\n\r\n    days_in_month MONTH\r\n\r\nThe `days_in_month` function converts a month number or name (spelled out or\r\nabbreviated) into a number of days corresponding to that month (not including\r\nleap-year effects).  Example: `days_in_month Feb` ==> 28\r\n\r\n    days_in_month[M]\r\n\r\nArray of integers, indexed by month number, corresponding to the number of\r\ndays in the given month `M`.\r\n\r\n    days_before_month[M]\r\n\r\nArray of integers representing the number of days from the beginning of the\r\nyear up to the month `M`.\r\n\r\n    is_leap_year YEAR\r\n\r\nReturn 0 (true) if `YEAR` is a leap year; return 1 (false) otherwise.\r\n\r\n    last_day_of_month YYYY MM\r\n\r\nReturn the last day of the month corresponding to year `YYYY` and month `MM`.\r\n\r\n    date_to_adays YYYY MM DD\r\n    date_to_adays YYYY-MM-DD\r\n\r\nReturns the number of absolute days from the beginning of the Gregorian\r\ncalendar for the given date, which can be specified with three numeric\r\narguments, or a single string argument, which must be parsable by\r\n`date_parse`.\r\n\r\n    jdays_to_date JDAYS\r\n\r\nConverts `JDAYS` (a Julian day number) into the corresponding date.  If the\r\ndate is greater than October 10, 1584, then the Gregorian calendar is used,\r\notherwise the Julian calendar is used for earlier dates.\r\n\r\n    adays_to_date ABSDAYS\r\n\r\nConverts `ABSDAYS` into a date formatted by `print_date`.\r\n\r\n    adays_to_jdays ADAYS\r\n    jdays_to_adays JDAYS\r\n\r\nThese functions convert from absolute days to Julian day number, and vice-versa.\r\n\r\n    week_number [DATESTRING | YYYY MM DD]\r\n\r\nReturns the week number for the given `DATESTRING` or date components.\r\n\r\n    date_to_weekday_name [DATESTRING | YYYY MM DD]\r\n\r\nReturns the weekday name for the given `DATESTRING` or date components.\r\n\r\n    date_to_weekday_num [DATESTRING | YYYY MM DD]\r\n\r\nReturns the weekday number (0..6) for the given `DATESTRING` or date components.\r\n\r\n    date_day_num [DATESTRING | YYYY MM DD]\r\n\r\nReturns the day number for the given `DATESTRING` or date components.\r\n\r\n    date_format [FORMAT] YYYY MM DD\r\n    date_format [FORMAT] YYYY-MM-DD\r\n\r\nThe `format_date` function accepts an optional format string, followed by\r\nthree numeric arguments, for the year, month, and day, or a single string\r\nargument in any of the parsable date formats, and reformats into the default\r\ndate format, given by `DATE_FORMAT`.  If `DATE_FORMAT` is not defined, the format\r\n`%F` is used.  (See `man strftime` for details).\r\n\r\n\r\nhash-utils.sh <a name=\"hash_utils\" id=\"hash_utils\">\r\n=============\r\n\r\nHashes are associative arrays. Hashes have __keys__ and associated\r\n__values__.   Use this library to simplify and ease your use of\r\nassociated arrays.\r\n\r\nThese are the hash utilities:\r\n\r\n    hash_init VAR [DEFAULT]\r\n\r\nInitialize `VAR` as an empty hash.\r\n\r\n    hash_default VAR\r\n\r\nReturn the default value for `HASH.`\r\n\r\n    hash_set_default VAR DEFAULT\r\n\r\nSet the default value for `HASH`.\r\n\r\n    hash_put VAR KEY VAL ...\r\n\r\nInsert `[KEY]=VAL` into the hash.\r\n\r\n    hash_set VAR KEY VAL\r\n\r\nAlias to `hash_put`.\r\n\r\n    hash_get  VAR KEY\r\n\r\nOutput the item associated with `KEY` in `VAR` to `STDOUT`.\r\n\r\n    hash_delete VAR KEY\r\n\r\nDelete `VAR[KEY]`.\r\n\r\n    hash_delete_if VAR KEY CONDITION\r\n\r\nDelete `VAR[KEY]` if `CONDITION` is true.\r\n\r\n    hash_keys VAR\r\n\r\nReturn all the keys in hash `VAR`.\r\n\r\n    hash_values VAR\r\n\r\nReturn all the values in hash `VAR`.\r\n\r\n    hash_each VAR KEYVAR EXPR\r\n\r\nEvaluate `EXPR`, setting `KEYVAR` to each key in `VAR`.\r\n\r\n    hash_copy HASH NEWHASH KEY1 ...\r\n\r\nCopy items at `KEY1`, .. from `HASH1` to `NEWHASH`.\r\n\r\n    in_hash      VAR KEY\r\n    has_key      VAR KEY\r\n    hash_member  VAR KEY\r\n    hash_include VAR KEY\r\n\r\nTest if `KEY` is in the hash `VAR`.\r\n\r\n    hash_size VAR\r\n\r\nReturns the number of `[key]=value` pairs\r\n\r\n    hash_merge VAR1 VAR2\r\n\r\nMerge key/value pairs from `VAR2` with `VAR1`.\r\n\r\n    hash_print HASHVAR [indent=INDENT] [width=WIDTH] [gutter=GUTTER] [cols=COLS] [sep=SEP]\r\n\r\nPrint the items in `HASHVAR` in vertically-sorted columns.  The\r\nnumber of columns is determined by `COLS`, if given, or by `WIDTH`\r\n(defaults to 80) divided by the maximum width of all items in\r\n`HASHVAR`.\r\n\r\nUse `GUTTER` blanks (default 2) to separate columns.\r\n\r\nIf `SEP` is given, it is used to delimit columns instead of blanks.\r\n\r\nEach option may be abbreviated to its leading character (e.g., \"g\"\r\nfor \"gutter\").\r\n\r\n    hash_help                             # describe the list functions\r\n\r\n\r\nhelp-util.sh <a nam=\"help_util\" id=\"help_util\">\r\n============\r\n\r\nThis utility makes it easy to provide helpful responses for shell functions\r\nthat are missing arguments.\r\n\r\nEach collection of related shell functions can share a common `help_FUNC`\r\nfunction, which is then filtered for the specific function name for which\r\nhelp is being sought.\r\n\r\nEach function that can be used by a user should start with a call to\r\n`help_args_func`, passing the `HELPFUNC`, `$#`, and the minimum number of\r\narguments.\r\n\r\nIf the using function is called with less than the required arguments the\r\n`HELPFUNC` is invoked and the output filtered through a simple filter that does\r\nnot print until the calling function name is found and then prints only until\r\nthe next empty line of test.\r\n\r\nEach collection of functions that wish to make use of this utility should\r\nhave a `HELPFUNC` that prints a brief description of each command (function),\r\nwhere each function name begins an unindented comment line, with exactly one\r\nblank after the comment character.  A description may follow -- as a bash\r\ncomment, indented or not.  Finally, the doc entry for the given function is\r\nan empty comment line.\r\n\r\nFor reference examples, please see either `list-utils.sh` or `hash-utils.sh`.\r\n\r\n    help_pager <<END_OF_MESSAGE\r\n    some message\r\n    ...\r\n    END_OF_MESSAGE\r\n\r\n\r\nlist-utils.sh <a name=\"list_utils\" id=\"list_utils\">\r\n==============\r\n\r\n`bash` script utilities for managing lists of things.\r\n\r\nIn the descriptions below, `VAR` is an array variable and `VAL`\\*, are\r\nvalues.\r\n\r\nThe functions that modify a list variable (e.g., `list_push`, `list_pop`)\r\ncannot be used within a sub-shell (e.g., a command substitution).\r\n\r\nCommands executed within a sub-shell are incapable of affecting variables in\r\nthe parent shell.  In other words, the expression `var=$(list_pop list)` looks\r\nnice but won't work.    Instead, do:\r\n\r\n    list_pop some_list    # sets \"$item\" with the popped value\r\n\r\nList Functions\r\n--------------\r\nThese are the list utilities:\r\n\r\n    list_init VAR\r\n\r\nInitialize `VAR` as an empty list.\r\n\r\n    list_add      VAR VAL1 [VAL2 ...]\r\n\r\nAdd one or more values (`VAL1..`) to the end of `VAR`.  There is no check for\r\nduplicates.\r\n\r\n    list_add_once VAR  VAL1 [VAL2 ..]\r\n\r\nAdd one or more values (`VAL1..`) uniquely to the end of `VAR`.\r\n\r\n    list_push VAR VAL ...\r\n\r\nAlias to `list_add`.\r\n\r\n    list_insert      VAR VAL ...\r\n\r\nInsert `VAL..` at the front of `VAR`.\r\n\r\n    list_insert_once VAR VAL ...\r\n\r\nInsert one or more values (`VAL..`) at the front of `VAR`. \r\n\r\n    list_pop VAR\r\n\r\nRemoves `VAL` from the list `VAR` and returns it in the variable `item`.\r\n\r\n    list_remove VAR VAL ...\r\n\r\nRemove one or more given values (`VAL..`) from the list `VAR`.\r\n\r\n    list_get  VAR N\r\n\r\nGet the `N`th item of `VAR` to `STDOUT`.\r\n\r\n    list_item VAR N\r\n\r\nSet the variable `item` to the `N`th item of `VAR`.\r\n\r\n    list_set  VAR N VAL\r\n\r\nSet the `N`th item of `VAR` to `VAL`.\r\n\r\n    list_items VAR [START [END]]\r\n\r\nReturn list items from `START` to `END` (or all).\r\n\r\n    list_copy LIST NEWLIST [START [END]]\r\n\r\nCopy list `LIST` to `NEWLIST,` from `START` to `END`.\r\n\r\n    in_list VAR  [-any|-all] VAL ...\r\n\r\nReturn true if one or more values are in list `VAR`.\r\n\r\n    list_size VAR\r\n\r\nReturns the number of items in `VAR`.\r\n\r\n    list_dump VAR\r\n\r\nOutput the contents of `VAR`, with indexes.\r\n\r\n    sort_str VAL ...\r\n\r\nSort the space-separated words of `VAL ..`.\r\n\r\n    list_sort VAR\r\n\r\nSort the contents of `VAR` (a list) in place.\r\n\r\n    list_sorted VAR\r\n\r\nOutput the items of `VAR` sorted.\r\n\r\n    sort_str2lines STRING\r\n\r\nSort `STRING` with each item in a separate line.\r\n\r\n    sort_list2lines VAR\r\n\r\nSort list `VAR` with each item in a separate line.\r\n\r\n    split_into  VAR \"STRING\" [SEP]\r\n\r\nSplit `STRING` by `SEP` into `VAR`.\r\n\r\n    split_str   \"STRING\" [SEP]\r\n\r\nSplit `STRING` by `SEP`.\r\n\r\n    list_join VAR [SEP] ..\r\n\r\nJoin the items in `VAR` into a list, separated by `SEP`.\r\n`SEP` can be:\r\n\r\n* `AND   ` - separate with `\" and \"` \r\n* `OR    ` - separate with `\" or \"` \r\n* `KEYS  ` - enclose each item with `X'` and `'`, followed by `,` \r\n* `TAB   ` - use tabs to separate items \r\n* `NL    ` - separate each item with newline (and some spaces) \r\n* `NOWRAP` - do not auto-wrap long lines (default is `WRAP`) \r\n* `','   ` - separate items with a comma (default) \r\n* `str   ` - separate each item with an given string. \r\n\r\n\r\n\r\n    join_lines\r\n\r\nRead `STDIN` and catenate lines; remove trailing `NL`.\r\n\r\n    list_lookup LISTVAR KEY\r\n\r\nLookup and return matching `KEY` in `LISTVAR`.  `KEY` can be an abbreviation.\r\n\r\n    list_grep   LISTVAR PAT\r\n\r\nPerform a `grep` using pattern `PAT` across the contents of `LISTVAR`.\r\n\r\n    list_map    LISTVAR EXPR [JOINSTR]\r\n\r\nCreate a list of `EXPR` applied to each item in `LISTVAR`.\r\n\r\n    list_reduce LISTVAR EXPR [INIT]\r\n\r\nReduce `LISTVAR` using `EXPR,` with initial value `INIT`.\r\n\r\n    list_sum LISTVAR\r\n\r\nSum the items in `LISTVAR`.\r\n\r\n    list_max LISTVAR\r\n\r\nReturn the maximum item in `LISTVAR`.\r\n\r\n    list_min LISTVAR\r\n\r\nReturn the minimum item in `LISTVAR`.\r\n\r\n    list_avg LISTVAR\r\n\r\nReturn the average of the items in `LISTVAR`.\r\n\r\n    list_print LISTVAR [indent=INDENT] [width=WIDTH] [sep=SEP] [cols=COLS]\r\n\r\n    list_print LISTVAR [i=INDENT] [w=WIDTH] [s=SEP]  [c=COLS]\r\n\r\nPrint the items in `LIST` in vertically-sorted columns.  Use `COLS` if given,\r\notherwise the number of columns is computed from `WIDTH` (defaults to 80) and\r\nthe maximum width of all the items in `LISTVAR`.\r\n\r\n    list_help\r\n\r\nDescribe the list functions.\r\n\r\nThere are convenient aliases for most `list_XXX` functions as `XXX_list`.  For\r\nexample, `join_list` => `list_join`, `list_pop` => `pop_list`, `map_list` =>\r\n`list_map`, etc.  This allows people who think _VERB-NOUN_ to use the functions\r\nlike `grep_list`, while other people who think _NOUN-VERB_ can use `list_grep`.\r\nThe canonical function name begins with `list_`.\r\n\r\nProgrammers wanting to make use of the list functions can use any of the list\r\nnames prefixed with `__` to avoid the argument checking that is more helpful\r\nfor interactive usage.  For example, within a script, the size of a list `FOO`\r\nis obtained with `__list_size FOO`.\r\n\r\nSplitting\r\n---------\r\n\r\n    split_into  VAR \"STRING\" SEP\r\n\r\nSplits a `STRING` into parts using separator (`SEP`) (default is ',')\r\nand assigns the resulting separated, quoted strings to the `VAR`.\r\n\r\n    split_str   \"STRING\" [SEP]\r\n\r\nOutputs the split of `STRING` into parts using a separator `SEP`\r\n(defaulting to space/tab).\r\n\r\n    split_input [SEP]\r\n\r\nSplits the input text into parts using separator (`SEP`) (default is tab).\r\n\r\nFor the split functions:\r\n\r\nIf `SEP` does not include a space (`\" \"`), care is taken to avoid removing\r\nwhitespace from the split values.\r\n\r\n`SEP` can be multiple characters; for example `' ,'` (a space, comma) will\r\nsplit using both space and comma.  By default, splitting is done by tabs.\r\n\r\nLookup functions\r\n----------------\r\n\r\n    list_lookup LIST \"WORD\"\r\n\r\nLooks up `WORD` in the array `LIST` for the uniquely matching item, using\r\ndisambiguating case-insensitive matching.  If no match, return empty string and\r\ncode 1; if 2 or more matches, return empty string, and error code 2.\r\n\r\n    list_grep LIST PATTERN\r\n\r\nLook up items matching `PATTERN` in the array `LIST`.  Return all matching items,\r\nand return code 0.  If no matching items, return empty string and return code 1.\r\n\r\n    lookup_error CODE WORD [NOTFOUNDMSG [AMBIGMSG]]\r\n\r\nA utility function to be used in conjunction with a `lookup_list` or\r\n`grep_list` invocation.  `CODE` is an error code returned from `lookup_list` or\r\n`grep_list`.  `WORD` is the word used on the search, and is used as the `\"%s\"`\r\nargument in either error message.  `NOTFOUNDMSG` is the error message used in\r\nthe case of error code 1.  `AMBIGMSG` is the error message used in the case of\r\nerror code 2.\r\n\r\n`lookup_error` is used like this:\r\n\r\n    read -p \"What word do you want to use?\" word\r\n    words=( a list of words to search from )\r\n    found=`lookup_list words $word` || lookup_error $? $word \\\r\n          \"'%s' is not a valid word\" \\\r\n          \"'%s\" is an ambiguous word\"\r\n\r\n\r\noption-utils.sh <a name=\"option_utils\" id=\"options_utils\">\r\n===============\r\n\r\nThe `option-util.sh` library is a small set of functions to manage\r\nbuilding options and arguments, which is often needed in the\r\ndevelopment of command-line utilities.  \r\n\r\nThese functions use two global variables: `option_pairs` and\r\n`options`.  The `option_pairs` variable is used to accumulate pairs\r\nof options and arguments, e.g.: `-F FILE`, while `options` is used to\r\naccumulate single character options that can be clustered behind a\r\nsingle dash \"-\".\r\n\r\nAll of the accumulated options and arguments can be output with\r\n`all_opts`.\r\n\r\n    init_opts                # empty \"option_pairs\" and \"options\"\r\n\r\n    reset_opts               # same as init_opts\r\n\r\n    add_optarg OPTION ARG .. # add OPTION and ARG to the option_pairs list\r\n\r\n    add_option OPTION ..     # add OPTION to the single options list\r\n    add_opt    OPTION ..     # eg: add_arg -c -d ..  or add_arg c d ..\r\n\r\n    all_opts                 # outputs both option_pairs and options\r\n\r\n\r\nprompt-colors.sh <a name=\"prompt_colors\" id=\"prompt_colors\">\r\n================\r\n\r\n`prompt-colors.sh` is a bash script that creates two functions:\r\n`define_color_names` and `reset_color_names`, and then invokes the former.  The\r\n`define_color_names` function creates a bunch of color variable names, setting\r\nthem to the corresponding `bash` prompt escape sequences.  This allows the\r\n`bash` `PS1` and related prompts to be easily colored using color names, like\r\n`${Red}` and `${BoldCyan}`.  The function `reset_color_names` removes all the\r\ncolor names from the current bash session.\r\n\r\nUsage:\r\n    \r\n    source prompt-colors.sh\r\n\r\n\r\nThe file `prompt-colors.sh` is actually dynamically generated from the script\r\n`generate-color-names`, and is not even part of this repository.  To create it, you\r\nmust run `make`, or invoke `generate-prompt-colors` manually.\r\n\r\n\r\nreal-utils.sh <a name=\"real_utils\" id=\"real_utils\">\r\n=============\r\nThe `real-utils.sh` bash library provides real number arithmetic in bash\r\nscripts.  Real numbers are managed as floating point strings in the format\r\n`\"X.Y\"`, where `X` is the integer portion, and `Y` is the fractional part.\r\n\r\nUsage:\r\n\r\n    source real-utils.sh\r\n\r\n    real_compute \"EXPRESSIN\"  [SCALE]\r\n\r\n    real_eval    \"EXPRESSION\" [SCALE]\r\n\r\n    real_cond     EXPRESSION  [SCALE]\r\n\r\n    real_int   REAL\r\n\r\n    real_frac  REAL\r\n\r\nDescriptions:\r\n\r\n    real_compute \"EXPRESSION\" [SCALE]\r\n\r\nThe `real_compute` bash function evaluates `EXPRESSION` using syntax, operators\r\nand functions as described in the `bc` manual.  All numbers and variables\r\nwithin `EXPRESSION` are interpreted by `bc`.  The result of the computation is\r\noutput to `STDOUT`.\r\n\r\nIf an error occurs, there is no indication.  This function does not set a\r\nreturn code, nor does it set the shell status variable `$?`.  Use `real_eval`\r\nfor those effects.\r\n\r\nIn addition to the operators and functions defined by `bc`, the following\r\nadditional functions are also made available within the `EXPRESSION`:\r\n\r\n    abs(x)           deg(x)           log10(x)         rad(x)\r\n    acos(x)          exp(x)           logn(x)          round(x,s)\r\n    asin(x)          frac(x)          ndeg(x)          sin(x)\r\n    atan(x)          int(x)           pi()             tan(x)\r\n    cos(x)           log(x)           pow(x,y)\r\n\r\nTo see the `bc` definitions of these functions, use the `real_functions`\r\nfunction.\r\n\r\n    real_eval \"EXPRESSION\" [SCALE]\r\n\r\nThe `real_eval` bash function invokes `real_compute` on the arguments, prints\r\nthe result on `STDOUT`, and returns with the `bc` return code `$?` (0 or 1, for\r\nsuccess or error, respectively).\r\n\r\n    real_cond \"EXPRESSION\" [SCALE]\r\n\r\n`EXPRESSION` is a real number conditional which should evaluate to 1 or 0.  The\r\nreturn status is 0 for true, 1 for false.  Example usage:\r\n\r\n    if real_cond \"$num < $max\" 2 ; then\r\n       ...\r\n    fi\r\n\r\n\r\n    real_scale=NUM\r\n\r\nSet the precision of subsequent real number arithmetic results.   The\r\ndefault is 2.\r\n\r\n    real_int   REAL         -- outputs the integer portion of a REAL number\r\n    real_frac  REAL         -- outputs the fractional portion of a REAL number\r\n\r\n    sin R, cos R, tan R     -- trig functions on radians R\r\n    asin X, acos X, atan X  -- inverse trig functions\r\n    cotan X, sec X, cosec X -- cotangent, secant, cosecant\r\n    arccot X                -- arc-cotangent\r\n    hypot X Y               -- hypotenuse X, Y [sqrt(X^2 + Y^2)]\r\n    sqrt X                  -- square-root of X\r\n    logn X, log X           -- natural log, log base 10\r\n    exp X                   -- exponent X of E (e.g., e^X)\r\n    pow X Y                 -- power function [X^Y]\r\n    rad D                   -- convert degrees D to radians\r\n    deg R                   -- convert radians R to degrees\r\n    ndeg R                  -- convert radians R to natural degrees (0..360)\r\n    round X S               -- Round X to S decimals.  When S=0, rounds to the nearest integer.\r\n    real_int X              -- outputs integer portion of X\r\n    real_frac X             -- outputs fractional portion of X\r\n    abs X                   -- Return the absolute value of X.\r\n\r\n    PI   = 3.141592653589793\r\n    TAU  = 6.283185307179586   # 2*PI\r\n    E    = 2.718281828459045\r\n\r\nrun-utils.sh <a name=\"run_utils\" id=\"run_utils\">\r\n============\r\nShell utility functions for running system commands:\r\n\r\n    run COMMAND ARGS ..       Show `COMMAND` `ARGS` if `$norun` or `$verbose`;\r\n                              run `COMMAND` unless `$norun`.\r\n\r\n    safe_run COMMAND ARGS ... Same as \"run\", but always executes.\r\n\r\n    rm_file_later FILE        Cause `FILE` to be removed upon program exit.\r\n\r\n    add_trap \"CMD\" SIGNAL ..  Add `CMD` to the trap list for `SIGNAL`\r\n\r\n\r\nsh-utils.sh <a name=\"sh_utils\" id=\"sh_utils\">\r\n===========\r\nHandy functions for writing bash-based scripts\r\n\r\nThe shell command utility functions consist of several groups\r\nof functions which collectively are quite useful in development\r\ncommand-line utilities and other system scripts.\r\n\r\nThe following are separate modules that are included with `sh-utils`:\r\n\r\n- `arg-utils`    - help with arguments or `STDIN`\r\n- `help-util`    - help with help on selected functions\r\n- `option-utils` - manage option and argument lists\r\n- `run-utils`    - run system commands, with `$norun` and `$verbose` \r\n- `talk-utils`   - conditional output to `STDERR`\r\n\r\nThere are also some miscellaneous functions:\r\n\r\n    rm_file_later FILE         Cause `FILE` to be removed upon program exit.\r\n\r\n    add_trap \"CMD\" SIGNAL ..   Add `CMD` to the trap list for `SIGNAL`\r\n\r\n    rm_trap \"CMD\" SIGNAL ..    Remove `CMD` from the trap list for `SIGNAL` ..\r\n\r\n    get_traps SIGNAL           Get the trap list for `SIGNAL`\r\n\r\n    filter_traps 'CMD'         Filter `CMD` from the trap list on `STDIN`\r\n\r\n    reset_traps SIGNAL         Reset (remove) the trap list for `SIGNAL`\r\n\r\n    fn_exists FUNCTION         Return 0 (true) if `FUNCTION` exists; 1 (false) otherwise\r\n\r\n\r\ntalk-utils.sh <a name=\"talk_utils\" id=\"talk_utils\">\r\n=============\r\n\r\nThe `talk`, `error`, and `die` functions print their arguments on `STDERR.`\r\nThe `talk` and `talkf` functions print unconditionally to `STDERR`, and return\r\nsuccess (0).  The related functions with prefixes of 'v', 'vo', 'nr', 'nv',\r\n'nq' and 'nrv' print conditionally and return success (0) if they printed, and\r\nfailure (1) otherwise.  This allows them to be used on conditionals.\r\n\r\nThe `warn` function is just another name for `talk`: it prints its output on\r\n`STDERR`.  The `error` function does the same, accepting an optional error\r\nCODE, and then exits.  The `die` function sends a `SIGABRT` signal to the\r\nparent process id, forcing an abort.\r\n\r\n       talk MSG ..              Print all args on `STDERR`\r\n      vtalk MSG ..              If `$norun` or `$verbose` is set, print all args.\r\n     votalk MSG ..              If `$verbose` only (no `$norun`) is set, print all args.\r\n     nrtalk MSG ..              if `$norun` set, print all args\r\n     nvtalk MSG ..              Unless `$verbose` is set, print all args\r\n     nqtalk MSG ..              Unless `$quiet` is set, print all args\r\n    nrvtalk MSG ..              If `$norun` or `$verbose` is set, print all args.\r\n\r\n       talkf FMT ARGS ..        Printf the arguments on `STDERR`\r\n      vtalkf FMT ARGS ..        If `$norun` or `$verbose` is set, `talkf` the args\r\n     votalkf FMT ARGS ..        If `$verbose` only (no `$norun`) is set, `talkf` the args\r\n     nrtalkf FMT ARGS ..        If `$norun` set, `talkf` the args\r\n     nvtalkf FMT ARGS ..        Unless `$verbose` is set, `talkf` the args\r\n     nqtalkf FMT ARGS ..        Unless `$quiet` is set, `talkf` the args\r\n    nrvtalkf FMT ARGS ..        If `$norun` or `$verbose` is set, `talkf` the args\r\n\r\n       warn MSG                 Print all args on `STDERR`\r\n      error [CODE] \"MSG\"        Print `MSG` on `STDERR`, then exit with code `CODE` (or 2)\r\n        die \"MSG\"               Print `MSG` on `STDERR`, then die (with `kill -ABRT`)\r\n\r\n      warnf FMT ARGS ..         Printf `FMT` `ARGS` on `STDERR`\r\n     errorf [CODE] FMT ARGS ..  Printf `FMT` `ARGS` on `STDERR`, then exit `$CODE` [2]\r\n       dief FMT ARGS ..         Printf `FMT` `ARGS` on `STDERR`, then die (with `kill -ABRT`)\r\n\r\n\r\ntext-utils.sh <a name=\"text_utils\" id=\"text_utils\">\r\n=============\r\nText processing utilities for bash scripts.\r\n\r\nusage:\r\n\r\n    export PATH=.:$HOME/lib:$PATH\r\n    source text-utils.sh\r\n\r\nThe following functions are provided by this library:\r\n\r\n    lowercase STRING              # return the lowercase string\r\n    uppercase STRING              # return the uppercase string\r\n    trim STRING                   # trim blanks surrounding string\r\n    ltrim STRING                  # trim left-side blanks from STRING\r\n    rtrim STRING                  # trim right-side blanks from STRING\r\n    squeeze STRING                # squeeze multiple blanks in string\r\n    split_str STRING [SEP]        # split STRING using SEP [default: ' \\t']\r\n    split_input [SEP]             # split STDIN using SEP [default: ' \\t']\r\n    args2lines [ARG ..]           # echo each ARG (or STDIN) on a separate line\r\n    sort_str2lines \"STRING ..\"    # output the sorted words in STRING on separate lines\r\n    join_lines                    # join lines on STDIN together with newlines\r\n    sort_str [WORDS TO BE SORTED] # return the sorted list of WORDS\r\n    str_sort [WORDS TO BE SORTED] # an alias for 'sort_str'\r\n    html_encode [STRING]          # encode STRING (or STDIN) for html\r\n    url_encode  [STRING]          # encode STRING (or STDIN) for url\r\n    html_decode [STRING]          # decode STRING (or STDIN) from HTML encoding\r\n    url_decode  [STRING]          # decode STRING (or STDIN) from URL encoding\r\n\r\nMost functions, except `split_str` and `sort_str`, can be used in a pipe\r\nwithout an argument.  For example:\r\n\r\n    echo \"This is a string\" | uppercase   => \"THIS IS A STRING\"\r\n    html_encode <input-file >html-file\r\n\r\ntest-utils.sh <a name=\"test_utils\" id=\"test_utils\">\r\n=============\r\nThe `test-utils.sh` library provides an infrastructure for test-driven\r\ndevelopment (TDD) of `bash` scripts.\r\n\r\nUsage:\r\n\r\n    source test-utils.sh\r\n\r\n    test_NAME1() {\r\n      start_test\r\n      ... # perform operations and test the results\r\n      end_test\r\n    }\r\n\r\n    test_NAME2() {\r\n      start_test\r\n      ... # perform operations and test the results\r\n      end_test\r\n    }\r\n\r\n    init_tests [ARGUMENTS]\r\n    run_tests\r\n    summarize_tests\r\n\r\nDescription:\r\n------------\r\n\r\nA *run* is a collection of *tests* (within a single file); each test has\r\na name.\r\n\r\nA *test* is a set of related operations with *checks* on the results.\r\n\r\nA *check*` tests or compares values, which quietly succeeds, or results in an\r\nerror.  The error message can be provided, or a default one is used.\r\n\r\nAt the end of each test, the number of checks and errors is remembered for\r\nlater summarization.\r\n\r\nAt the end of the run, all checks and error counts are summarized.\r\n\r\nWhile the tests and checks are being performed, output is occuring to show the\r\nprogress.  There are three modes of output: terse, errors-only, and detailed.\r\n\r\nTerse mode shows each test name followed by the number of checks, and how many\r\nof those checks had errors.  Terse mode is the default.\r\n\r\nIn errors-only mode, successful tests still show the same as terse mode, but\r\ntests with error checks show the error message followed by a stack dump\r\nindicating the location of the error.  Errors-mode is indicated by the `-e`\r\noption when invoking the test script.\r\n\r\nIn details mode, the tests and checks are run in verbose mode, showing both\r\nsuccessful checks and errors.  Details mode is indicated by the `-d` option.\r\n\r\nWhen invoking the test script, the command line argument can be used to pass\r\na `PATTERN` that is used to match a subset of the test names.  By default, all\r\ntests with the pattern \"test_\" are run.  For example, if the pattern \"basic\" is\r\nused, all tests with the string \"basic\"` will be run, and no others.\r\n\r\nIn order to be discovered for automatic test runs, the tests functions must\r\nhave the function name begin with `test_`.\r\n\r\nA common technique for test naming is: `test_NN_some_descriptive_name`, where\r\n`NN` is a number.  This allows easy reference by the `NN` to selectively run a\r\ntest or tests.\r\n\r\nBelow are the tests that are currently supported:\r\n\r\n      check_value        VAL               ERROR\r\n      check_empty        VAL               ERROR\r\n\r\nExpression tests\r\n\r\n      check_true         \"EXPR\"            ERROR\r\n      check_false        \"EXPR\"            ERROR\r\n\r\nArray item tests\r\n\r\n      check_size         LIST SIZE         ERROR  # same as check_size_eq\r\n      check_size_XX      LIST SIZE         ERROR\r\n\r\n      check_item         LIST INDEX VAL    ERROR\r\n      check_item_equal   LIST INDEX VAL    ERROR\r\n      check_item_unequal LIST INDEX NONVAL ERROR\r\n\r\nHash tests\r\n\r\n      check_key          HASH KEY          ERROR\r\n      check_no_key       HASH KEY          ERROR\r\n      check_key_value    HASH KEY VALUE    ERROR\r\n\r\nString tests\r\n\r\n      check_equal        VAL1 VAL2         ERROR\r\n      check_unequal      VAL1 VAL2         ERROR\r\n\r\n      check_match        VAL1 REGEXP       ERROR\r\n      check_nomatch      VAL1 REGEXP       ERROR\r\n\r\nNumeric tests\r\n\r\n      check_eq           N1 N2             ERROR\r\n      check_ne           N1 N2             ERROR\r\n      check_lt           N1 N2             ERROR\r\n      check_le           N1 N2             ERROR\r\n      check_gt           N1 N2             ERROR\r\n      check_ge           N1 N2             ERROR\r\n\r\nOutput tests\r\n\r\n     check_output [NAME] EXPRESSION [ERROR]\r\n\r\nEvaluate `EXPRESSION` and compare its output against a previously collected\r\nreference output.  If the output matches, the test succeeds.  If the output\r\ndoes not match, print `ERROR` or a default error message.\r\n\r\nUse `NAME` as the unique identifier for files in which the `stdout`, `stderr`,\r\nand reference output is identified.\r\n\r\nReference output can be created by the `-k` (`$keep`) option when the test is\r\nrun.\r\n\r\nThe first time a new `check_output` test is evaluated, there will not be a\r\ncollected reference output to compare against, and the test will fail.\r\n\r\nExamples of Tests:\r\n------------------\r\n\r\nPlease carefully review the various test files in this repository:\r\n\r\n    test-date-utils.sh    -- test the functions in date-utils.sh\r\n    test-hash-utils.sh    -- test the functions in hash-utils.sh\r\n    test-list-utils.sh    -- test the functions in list-utils.sh\r\n    test-real-utils.sh    -- test the functions in real-utils.sh\r\n    test-sh-utils.sh      -- test the functions in sh-utils.sh\r\n    test-text-utils.sh    -- test the functions in text-utils.sh\r\n    test-template.sh      -- a template for future tests\r\n    test-utils.sh         -- the functions described here\r\n\r\nNOTE: The following functions are not yet implemented.\r\n\r\n     check_out      [NAME] EXPRESSION [ERROR]\r\n     check_out_none [NAME] EXPRESSION [ERROR]\r\n     check_err      [NAME] EXPRESSION [ERROR]\r\n     check_err_none [NAME] EXPRESSION [ERROR]\r\n\r\nCheck that `STDOUT` or `STDERR` is or is not empty when evaluating\r\n`EXPRESSION`, or show the `ERROR` (or default) message.\r\n\r\n     check_out_eq   [NAME] EXPRESSION VALUE [ERROR]\r\n     check_err_eq   [NAME] EXPRESSION VALUE [ERROR]\r\n\r\nCheck that the `STDOUT`, or `STDERR` of the evaluated `EXPRESSION` matches\r\n`VALUE`, or show the `ERROR` (or a default error message).\r\n\r\n     check_out_ne [NAME] EXPRESSION VALUE [ERROR]\r\n     check_err_ne [NAME] EXPRESSION VALUE [ERROR]\r\n\r\nCheck that the `STDOUT` or `STDERR` of the evaluated `EXPRESSION` does not\r\ncontain `VALUE`, or show the `ERROR`.\r\n\r\nIn all cases, the `ERROR` message is optional.\r\n\r\ntime-utils.sh <a name=\"time_utils\" id=\"time_utils\">\r\n=============\r\nThe `time-utils` library enables easy management of timestamps, with hour,\r\nminute, seconds, and timezone components.  A variety of time formats are\r\nsupported both on input parsing, and on output formatting. \r\n\r\n    time_parse [TIMESTRING]\r\n    time_arg   [TIMESTRING]\r\n\r\nParse `TIMESTRING` in one of several recognized formats: `HH:MM:SS`,\r\n`HH:MM:SS.ssss`, If the `TIMESTRING` is successfully parsed, the variables\r\n`hours`, `mins`, and `secs` are set the corresponding numbers.  `time_arg` is\r\nanother name for the same function.\r\n\r\nIf `TIMESTRING` is empty, a line of input from `STDIN` is read and used instead.\r\n\r\n    time2secs [TIMESTRING]\r\n\r\nParse `TIMESTRING` (or `STDIN)` and convert to seconds.\r\n\r\n    time_format [FORMAT] HOURS MINS SECS\r\n    time_format [FORMAT] TIMESTRING\r\n\r\nThe `time_format` function accepts an optional format string, followed by three\r\nnumeric arguments, for the hour, minutes, and seconds, or a single string\r\nargument in any of the parsable date formats, and reformats into the default\r\ntime format, given by `TIME_FORMAT`.  If `TIME_FORMAT` is not defined, the\r\nformat `%T` is used.  (See `man strftime` for details).\r\n\r\n    time_add TIME1 TIME2\r\n\r\nAdd `TIME1` to `TIME2` and produce a `time_format` result.\r\n\r\n    time_sub TIME1 TIME2\r\n\r\nSubtract `TIME2` from `TIME1` and produce a `time_format` result.\r\n\r\nvim: set ai sw=2\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}